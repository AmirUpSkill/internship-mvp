# app/models/ai.py

from pydantic import BaseModel, Field
from typing import Optional, Dict, List, Any
from uuid import UUID
from datetime import datetime

class AIProcessingRequest(BaseModel):
    """
    Model representing the input required for processing extracted PDF content with an AI model.
    """
    document_id: UUID = Field(..., description="The unique identifier of the source PDF document.")
    pdf_content: str = Field(..., description="The extracted text content from the PDF document.")
    system_prompt: str = Field(...,
                               description="Instructions guiding the AI's response generation (e.g., required format, persona, task based on ClickUp ticket).")
    # Optional: Add if you anticipate specific user questions beyond the system prompt
    # user_query: Optional[str] = Field(None, description="A specific question or query from the user regarding the PDF content.")

    class Config:
        json_schema_extra = {
            "example": {
                "document_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                "pdf_content": "This document outlines the project requirements. Key sections include Scope, Timeline, and Budget...",
                "system_prompt": "Extract the project scope, budget amount, and final deadline. Format the output as a JSON object with keys 'scope', 'budget', and 'deadline'.",
            }
        }


class AIProcessingResponse(BaseModel):
    """
    Model representing the structured JSON output after AI processing of PDF content.
    The 'ai_structured_output' field holds the primary result, parsed into a Python dict/list.
    """
    document_id: UUID = Field(..., description="The unique identifier of the source PDF document processed.")
    status: str = Field(..., description="Status of the AI processing ('success' or 'error').")
    ai_structured_output: Optional[Dict | List | Any] = Field(None,
                                                            description="The structured data (dict/list) extracted or generated by the AI, parsed from its response.")
    model_used: Optional[str] = Field(None, description="Identifier of the AI model used (e.g., 'gemini-1.5-flash').")
    processing_timestamp: datetime = Field(default_factory=datetime.now, description="Timestamp when the AI processing completed.")
    error_message: Optional[str] = Field(None, description="Details if the processing status is 'error'.")

    class Config:
        json_schema_extra = {
            "example_success": {
                "document_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                "status": "success",
                "ai_structured_output": {
                    "scope": "Develop a new PDF processing API.",
                    "budget": "$10,000",
                    "deadline": "2024-12-31"
                },
                "model_used": "gemini-2.0-flash",
                "processing_timestamp": "2024-07-26T15:30:00.123Z",
                "error_message": None
            },
            "example_failure": {
                "document_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                "status": "error",
                "ai_structured_output": None,
                "model_used": "gemini-2.0-flash",
                "processing_timestamp": "2024-07-26T15:35:00.456Z",
                "error_message": "AI model response could not be parsed into valid JSON."
            }
        }